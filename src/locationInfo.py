import glob as gb
import os
import warnings
import pandas as pd
import xlwings as xw # Xlwings is a Python library that makes it easy to call Python from Excel
# used to filter out warning messages generated by modules or functions called in your code.
warnings.filterwarnings("ignore")

all_data = []
def split_folder(subfolder):
    global all_data
    #split the file name from _
    parts = subfolder.split('_')
    if len(parts) != 11:
        print(f"[SKIPPED] Folder '{subfolder}' — expected 11 parts, got {len(parts)}")
        return
    
    #set last 4 parts to relevant variable
    project_code, project_name, project_typology, location = parts[7:11]
    report_data = {
        'FileName': subfolder,
        'ProjectCode': project_code,
        'ProjectName': project_name,
        'ProjectTypology': project_typology,
        'Location': location
    }
    all_data.append(report_data)

# function to get location_info having parameters all_data which is of main.py file, in get_report_and_save() function.
def get_locInfo(inputPath):
    # Load the CSV database containing Latitude, Longitude, and Climate information
    database = pd.read_csv("database/location.csv")
    print("\n\n\n\n\n\n")
    print(inputPath)
    print("\n\n\n\n\n\n")
    #iterate through sim files in inputPath
    for file in gb.glob(os.path.join(inputPath, "*.sim")):
        file_name = os.path.basename(file)
        print("\n\n\n\n\n\n")
        print(file)
        print("\n\n\n\n\n\n")
        file_name_without_ext = os.path.splitext(file_name)[0]
        
        #split_folder(file_name_without_ext)
        get_file_details(file_name_without_ext)
        

    # store all data columns with values in dataframe
    combined_data = pd.DataFrame(all_data)
    
    # merge combined data and database based on location matching on both combined data and database.
    # The LEFT JOIN keyword returns all records from the left table (combined_data), and the 
    # matching records from the right table (database).
    combined_data = pd.merge(combined_data, database, left_on='Location', right_on='Location', how='left')
    #print(combined_data)
    #print(database)
    
    # add new column as latitude and longitude and taking 'Longi_unit' and 'Lati_unit' after value. like- 17.2N
    combined_data['Latitude'] = combined_data['Latitude'].astype(str) + combined_data['Lati_unit']
    combined_data['Longitude'] = combined_data['Longitude'].astype(str) + combined_data['Longi_unit']


    # drop all rows accept latitude and longitude of combined_data dataframe
    combined_data = combined_data.drop('State', axis=1)
    combined_data = combined_data.drop('State_Location', axis=1)
    combined_data = combined_data.drop('Lati_unit', axis=1)
    combined_data = combined_data.drop('Longi_unit', axis=1)
    combined_data = combined_data.drop_duplicates()
    
    

    # Allot combined_data with requied column headers.
    combined_data[['FileName','ProjectCode', 'ProjectName', 'ProjectTypology', 'Location',  'Climate', 'Latitude', 'Longitude']]

    return combined_data
    
def get_file_details(FileName):
    global all_data
    #split the file name from _
    parts = FileName.split('_')
    if len(parts) != 8:
        print(f"[SKIPPED] Folder '{FileName}' — expected 11 parts, got {len(parts)}")
        return
    
    #set last 4 parts to relevant variable
    file_id = parts[-1]
    file_df = pd.read_csv('database/file_db.csv')
    result = file_df[file_df['File_id'] == file_id]
    #print(result)
    project_code = ''
    project_name = ''
    project_typology = ''
    location = ''
    # Print the result
    if not result.empty:
        project_code = result.iloc[0]['Project_Code']
        project_name = result.iloc[0]['Project_Name']
        project_typology = result.iloc[0]['Typology']
        location = result.iloc[0]['Location']
    else:
        print("Project not found.")
    report_data = {
        'FileName': FileName,
        'ProjectCode': project_code,
        'ProjectName': project_name,
        'ProjectTypology': project_typology,
        'Location': location
    }
    
    
    all_data.append(report_data)