import glob as gb
import os
import warnings
import pandas as pd
import xlwings as xw # Xlwings is a Python library that makes it easy to call Python from Excel
# used to filter out warning messages generated by modules or functions called in your code.
warnings.filterwarnings("ignore")

all_data = []
def split_folder(subfolder):
    global all_data
    parts = subfolder.split('_')
    if len(parts) != 4:
        print(f"[SKIPPED] Folder '{subfolder}' â€” expected 4 parts, got {len(parts)}")
        return
    project_code, project_name, project_typology, location = parts
    report_data = {
        'ProjectCode': project_code,
        'ProjectName': project_name,
        'ProjectTypology': project_typology,
        'Location': location
    }
    all_data.append(report_data)

# function to get location_info having parameters all_data which is of main.py file, in get_report_and_save() function.
def get_locInfo(subfolders, inputPath):
    # Load the CSV database containing Latitude, Longitude, and Climate information
    database = pd.read_csv("database/location.csv")

    for subfolder in subfolders: # iterate in each subfolder
        # Join the inputPath and subfolder to create the complete directory path
        path = os.path.join(inputPath, subfolder) 
        # Use glob.glob() to find files with the ".sim" extension within the specified directory path
        simfiles = gb.glob(f'{path}/*.sim', recursive=True)
        # iterate in each sim folder
        for name in simfiles:
            split_folder(subfolder)

    # store all data columns with values in dataframe
    combined_data = pd.DataFrame(all_data)

    # merge combined data and database based on location matching on both combined data and database.
    # The LEFT JOIN keyword returns all records from the left table (combined_data), and the 
    # matching records from the right table (database).
    combined_data = pd.merge(combined_data, database, left_on='Location', right_on='Location', how='left')

    # add new column as latitude and longitude and taking 'Longi_unit' and 'Lati_unit' after value. like- 17.2N
    combined_data['Latitude'] = combined_data['Latitude'].astype(str) + combined_data['Lati_unit']
    combined_data['Longitude'] = combined_data['Longitude'].astype(str) + combined_data['Longi_unit']

    # drop all rows accept latitude and longitude of combined_data dataframe
    combined_data = combined_data.drop('State', axis=1)
    combined_data = combined_data.drop('State_Location', axis=1)
    combined_data = combined_data.drop('Lati_unit', axis=1)
    combined_data = combined_data.drop('Longi_unit', axis=1)
    combined_data = combined_data.drop_duplicates()
    
    # Allot combined_data with requied column headers.
    combined_data[['ProjectCode', 'ProjectName', 'ProjectTypology', 'Location',  'Climate', 'Latitude', 'Longitude']]
    
    return combined_data
    
    